//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
/// @@allow('read', true)
model User {
  id                String         @id() @default(uuid())
  name              String?
  email             String?        @unique()
  pictureUrl        String?        @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus     @default(VERIFIED)
  /// @password
  /// @omit
  password          String?
  dateCreated       DateTime       @default(now())
  dateUpdated       DateTime       @default(now()) @updatedAt()
  accounts          Account[]
  sessions          Session[]
  roles             Role[]
  quotes            Quote[]        @relation("user")
  images            Image[]        @relation("user")
  videos            Video[]        @relation("user")
  followsAsFollower Follow[]       @relation("follower")
  followsAsFollowee Follow[]       @relation("followee")
  notes             Note[]         @relation("user")
  savedContents     SavedContent[] @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Quote {
  id                     String         @id() @default(uuid())
  content                String
  author                 String?
  category               String?
  datePosted             String?
  userId                 String?
  user                   User?          @relation(fields: [userId], references: [id], name: "user")
  contentTagsAsContent   ContentTag[]   @relation("content")
  savedContentsAsContent SavedContent[] @relation("content")
  dateCreated            DateTime       @default(now())
  dateUpdated            DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model ContentTag {
  id          String   @id() @default(uuid())
  contentId   String?
  content     Quote?   @relation(fields: [contentId], references: [id], name: "content")
  tagId       String?
  tag         Tag?     @relation(fields: [tagId], references: [id], name: "tag")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Tag {
  id          String       @id() @default(uuid())
  name        String
  contentTags ContentTag[] @relation("tag")
  dateCreated DateTime     @default(now())
  dateUpdated DateTime     @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SavedContent {
  id          String   @id() @default(uuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  contentId   String?
  content     Quote?   @relation(fields: [contentId], references: [id], name: "content")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Image {
  id          String   @id() @default(uuid())
  url         String
  title       String?
  description String?
  datePosted  String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Video {
  id          String   @id() @default(uuid())
  url         String
  title       String?
  description String?
  datePosted  String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Follow {
  id          String   @id() @default(uuid())
  followerId  String?
  follower    User?    @relation(fields: [followerId], references: [id], name: "follower")
  followeeId  String?
  followee    User?    @relation(fields: [followeeId], references: [id], name: "followee")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Note {
  id          String   @id() @default(uuid())
  date        String?
  content     String
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model SavedContent {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  contentId String?
  content   Content? @relation(fields: [contentId], references: [id])

  createdAt DateTime @default(now())
}

/// @@allow('all', true)
model Content {
  id       String   @id @default(uuid())
  type     ContentType
  quote    Quote?   @relation(fields: [id], references: [contentId])
  image    Image?   @relation(fields: [id], references: [contentId])
  video    Video?   @relation(fields: [id], references: [contentId])
}

enum ContentType {
  QUOTE
  IMAGE
  VIDEO
}
